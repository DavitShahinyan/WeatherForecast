// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecast.DAL;

#nullable disable

namespace WeatherForecast.DAL.Migrations
{
    [DbContext(typeof(WeatherForecastDbContext))]
    [Migration("20240505200941_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.DailyWeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("Humidity")
                        .HasColumnType("tinyint");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Date", "CityId")
                        .IsUnique();

                    b.ToTable("DailyWeatherForecasts");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.HourlyWeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyWeatherForecastId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Hour")
                        .HasColumnType("time");

                    b.Property<byte>("Humidity")
                        .HasColumnType("tinyint");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DailyWeatherForecastId");

                    b.ToTable("HourlyWeatheForecasts");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.City", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.DailyWeatherForecast", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.HourlyWeatherForecast", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.DailyWeatherForecast", "DailyWeatherForecast")
                        .WithMany("HourlyWeatherForecasts")
                        .HasForeignKey("DailyWeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyWeatherForecast");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.DailyWeatherForecast", b =>
                {
                    b.Navigation("HourlyWeatherForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
